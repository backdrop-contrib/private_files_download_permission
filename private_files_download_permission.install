<?php

/**
 * @file
 * Installs, updates and uninstalls module variables and settings.
 *
 */

/**
 * Implements hook_schema().
 */
function private_files_download_permission_schema() {
  return array(
    'private_files_download_permission_directory_user' => array(
      'description'  => 'Users having per-directory download permission.',
      'fields'       => array(
        'duid' => array('type' => 'serial', 'unsigned' => TRUE, 'not null' => TRUE),
        'did'  => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
        'uid'  => array('type' => 'int', 'unsigned' => TRUE, 'not null' => TRUE),
      ),
      'primary key'  => array('duid'),
      'foreign keys' => array(
        'private_files_download_permission_directory' => array(
          'table'   => 'private_files_download_permission_directory',
          'columns' => array('did' => 'did'),
        ),
        'private_files_download_permission_directory_user' => array(
          'table'   => 'users',
          'columns' => array('uid' => 'uid'),
        ),
      ),
      'unique keys'  => array(),
      'indexes'      => array(),
    ),
  );
}

/**
 * Implements hook_install().
 */
function private_files_download_permission_install() {
  $transaction = db_transaction();
  try {
    // Add "real" foreign keys.
    db_query('ALTER TABLE {private_files_download_permission_directory_user}
      ADD CONSTRAINT {private_files_download_permission_directory_2}
      FOREIGN KEY (did) REFERENCES {private_files_download_permission_directory} (did)
      ON DELETE CASCADE
      ON UPDATE CASCADE');
    db_query('ALTER TABLE {private_files_download_permission_directory_user}
      ADD CONSTRAINT {private_files_download_permission_directory_user}
      FOREIGN KEY (uid) REFERENCES {users} (uid)
      ON DELETE CASCADE
      ON UPDATE CASCADE');
  }
  catch (Exception $e) {
    $transaction->rollback();
    $t = get_t();
    backdrop_set_message($t('An error occurred while installing the module. Please check the log for details.'), 'error');
  }
}


/**
 * Implements hook_enable().
 */
function private_files_download_permission_enable() {
  // Purge directory list from cache.
  backdrop_static_reset('private_files_download_permission_directory_list');
}

/**
 * Implements hook_uninstall().
 */
function private_files_download_permission_uninstall() {
  $transaction = db_transaction();
  try {
    db_query('ALTER TABLE {private_files_download_permission_directory_user}
      DROP FOREIGN KEY {private_files_download_permission_directory_2}');
    db_query('ALTER TABLE {private_files_download_permission_directory_user}
      DROP FOREIGN KEY {private_files_download_permission_directory_user}');
  }
  catch (Exception $e) {
    $transaction->rollback();
    $t = get_t();
    backdrop_set_message($t('An error occurred while removing the module. Please check the log for details.'), 'error');
  }

  // Purge directory list from cache.
  backdrop_static_reset('private_files_download_permission_directory_list');
}

/**
 * Implements hook_update_last_removed().
 */
function private_files_download_permission_update_last_removed() {
  return 7204;
}

/**
 * @defgroup updates-7.x-to-1.x Updates from 7.x to 1.x
 * @{
 * Update functions from Drupal 7.x to Backdrop CMS 1.x.
 */

/**
 * Move private_files_download_permission settings from variables to config.
 */

function private_files_download_permission_update_1000() {
  // Migrate variables to config.
  $config = config('private_files_download_permission.settings');
  $config->set('attachment_mode', update_variable_get('private_files_download_permission_attachment_mode', FALSE));
  $config->set('by_user_checks', update_variable_get('private_files_download_permission_by_user_checks', FALSE));
  $config->set('cache_users', update_variable_get('private_files_download_permission_cache_users', FALSE));
  $config->set('debug_mode', update_variable_get('private_files_download_permission_debug_mode', FALSE));

  $config->save();

  // Delete variables.
  update_variable_del('private_files_download_permission_attachment_mode');
  update_variable_del('private_files_download_permission_by_user_checks');
  update_variable_del('private_files_download_permission_cache_users');
  update_variable_del('private_files_download_permission_debug_mode');

}

/**
 * Move some private_files_download_permission configuration from table to config files.
 */
function private_files_download_permission_update_1001() {
  if (db_table_exists('private_files_download_permission_directory')) {
    $directories = db_select('private_files_download_permission_directory', 'd')
    ->fields('d')
    ->execute()
    ->fetchAllAssoc('did');

    foreach($directories as $directory) {
      $config = config('private_files_download_permission.settings');
      $config->set('directories.' . $directory->did, array(
        'path' => $directory->path,
        'bypass' => $directory->bypass,
        'grant_file_owners' => $directory->grant_file_owners,
      ));
      $config->save();
    }
    db_drop_table('private_files_download_permission_directory');
  }

  if (db_table_exists('private_files_download_permission_directory_role')) {
    $directory_roles = db_select('private_files_download_permission_directory_role', 'dr')
    ->fields('dr')
    ->execute()
    ->fetchAllAssoc('drid');

    foreach($directory_roles as $role) {
      $config = config('private_files_download_permission.settings');
      if ($role->rid == 1) {
        $role->rid = 'anonymous';
      } elseif ($role->rid == 2) {
        $role->rid = 'authenticated';
      }
      $roles[$role->did][] = $role->rid;
    }
    $config->set('directories.' . $role->did . '.roles', $roles);
    $config->save();
    db_drop_table('private_files_download_permission_directory_role');
  }

  // Drop all foreign keys
}

/**
 * Remove foreign keys on the private_files_download_permission_directory_user table.
 */
function private_files_download_permission_update_1002() {
  // if user table exists
  db_query('ALTER TABLE {private_files_download_permission_directory_user}
    DROP FOREIGN KEY {private_files_download_permission_directory_2}');
  db_query('ALTER TABLE {private_files_download_permission_directory_user}
    DROP FOREIGN KEY {private_files_download_permission_directory_user}');
}

/**
 * Update table columns.
 */
// function private_files_download_permission_update_1001() {
//   // Update role ID to be a varchar instead of an integer.
//   if (db_field_exists('simple_access_roles', 'rid')) {
//     db_drop_primary_key('simple_access_roles');
//     db_drop_index('simple_access_roles', 'rid');
//     $role_column = array(
//       'type' => 'varchar',
//       'length' => 20,
//       'description' => 'The role name.',
//       'not null' => TRUE,
//       'default' => '',
//     );
//     db_change_field('simple_access_roles', 'rid', 'role', $role_column);

//     db_add_primary_key('simple_access_roles', array('gid', 'role'));
//     db_add_index('simple_access_roles', 'role', array('role'));
//   }

//   $roles = array(
//     '1' => 'anonymous',
//     '2' => 'authenticated',
//   );
//   foreach ($roles as $rid => $name) {
//     // Update the simple_access_roles table to match the new role names.
//     db_update('simple_access_roles')
//       ->fields(array(
//         'role' => $name,
//       ))
//       ->condition('role', $rid)
//       ->execute();
//   }

//   db_drop_field('simple_access_roles', 'rid');
// }

/*
 * @} End of "defgroup updates-7.x-to-1.x"
 * The next series of updates should start at 2000.
 */
