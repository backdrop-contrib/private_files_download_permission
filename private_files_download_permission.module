<?php

/**
 * @file
 * Handles both module settings and its behaviour.
 *
 * Copyright (c) 2011-2012 by Marco Zanon (http://www.marcozanon.com)
 * Released under GPLv2 license
 * Idea and code inspired by http://www.beacon9.ca/labs/drupal-7-private-files-module
 */

/**
 * Implements hook_permission().
 */
function private_files_download_permission_permission() {
  return array(
    'administer private files download permission' => array(
      'title'       => t('Administer Private files download permission'),
      'description' => t('Access module configuration.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function private_files_download_permission_menu() {
  return array(
    'admin/config/media/private-files-download-permission/list' => array(
      'title'            => 'Private files download permission',
      'description'      => 'List directories under control by this module.',
      'page callback'    => 'private_files_download_permission_list',
      'access arguments' => array('administer private files download permission'),
      'type'             => MENU_NORMAL_ITEM,
    ),
    'admin/config/media/private-files-download-permission/%/remove' => array(
      'title'            => 'Private files download permission',
      'description'      => 'Remove directory from the control list.',
      'page callback'    => 'drupal_get_form',
      'page arguments'   => array('private_files_download_permission_remove', 4),
      'access arguments' => array('administer private files download permission'),
      'type'             => MENU_CALLBACK,
    ),
  );
}

/**
 * Returns the list of all directories under control.
 */
function private_files_download_permission_directory_list() {
  $directory_list = &drupal_static(__FUNCTION__);
  if (!isset($directory_list)) {
    $directory_list = db_query('SELECT   *
                                FROM     {private_files_download_permission_directory}
                                ORDER BY {private_files_download_permission_directory}.path ASC')
                        ->fetchAllAssoc('did');
  }
  return $directory_list;
}

/**
 * (Page callback.) Displays the main page showing the directory list.
 */
function private_files_download_permission_list() {
  $output = '';
  // Check if the file system download method is set to private.
  if ('private' !== file_default_scheme()) {
    drupal_set_message(t('You need to !set_your_file_system_download_method to private.', array('!set_your_file_system_download_method' => l(t('set your file system download method'), 'admin/config/media/file-system'))), 'error');
  }
  // Display the private file system path.
  $output .= '<p>' . t('Your private file system path is %path.', array('%path' => variable_get('file_private_path'))) . '</p>';
  // Retrieve the directory list and display it as a table.
  $directory_list = private_files_download_permission_directory_list();
  $rows = array();
  foreach ($directory_list as $directory) {
    $rows[] = array(
      $directory->path,
      l(t('Edit'), 'admin/config/media/private-files-download-permission/' . $directory->did . '/edit/'),
      l(t('Remove'), 'admin/config/media/private-files-download-permission/' . $directory->did . '/remove/'),
    );
  }
  $output .= theme_table(array(
    'header' => array(
      t('Directory path'),
      array(
        'data'    => t('Operations'),
        'colspan' => 2,
      ),
    ),
    'rows'       => $rows,
    'attributes' => array(),
    'caption'    => NULL,
    'colgroups'  => array(),
    'sticky'     => FALSE,
    'empty'      => t('The directory list is empty.'),
  ));
  // Display the 'Add directory' link.
  $output .= '<p>' . l(t('Add directory'), 'admin/config/media/private-files-download-permission/add') . '</p>';
  // Display output.
  return $output;
}

/**
 * (Form callback.) Displays a confirmation dialog before removing a directory
 * from the control list.
 */
function private_files_download_permission_remove($form, &$form_state, $did) {
  $form = array();
  // Check that $did is actually a valid directory id.
  $directory_list = private_files_download_permission_directory_list();
  if (!in_array($did, array_keys($directory_list))) {
    drupal_set_message(t('You need to provide a valid directory id.'), 'error');
    return;
  }
  // Prepare the value to be eventually submitted.
  $form['did'] = array(
    '#type'  => 'value',
    '#value' => $did,
  );
  // Display the confirmation form.
  return confirm_form(
    $form,
    t('Are you sure you want to remove @path from the control list?', array('@path' => $directory_list[$did]->path)),
    'admin/config/media/private-files-download-permission/list',
    t('This action cannot be undone.'),
    t('Remove directory from the control list'),
    t('Cancel')
  );
}

/**
 * (Form callback.) Removes a directory from the control list.
 */
function private_files_download_permission_remove_submit($form, &$form_state) {
  // Check that $form_state['values']['did'] is actually a valid directory id.
  $directory_list = private_files_download_permission_directory_list();
  if (!in_array($form_state['values']['did'], array_keys($directory_list))) {
    drupal_set_message(t('You need to provide a valid directory id.'), 'error');
    return;
  }
  // Remove the associated directory.
  db_delete('private_files_download_permission_directory')
    ->condition('did', $form_state['values']['did'])
    ->execute();
  // Purge directory list from cache.
  drupal_static_reset('private_files_download_permission_directory_list');
  // Set form redirection.
  $form_state['redirect'] = 'admin/config/media/private-files-download-permission/list';
}
